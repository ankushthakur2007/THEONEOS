import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { text } = await req.json();
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY');

    if (!supabaseUrl || !supabaseAnonKey) {
      throw new Error('Supabase URL or Anon Key not set in environment variables.');
    }

    let audioUrl = null;
    let serviceUsed = 'none';

    // Try ElevenLabs first
    try {
      console.log('Attempting TTS with ElevenLabs...');
      const elevenLabsResponse = await fetch(`${supabaseUrl}/functions/v1/elevenlabs-tts`, {
        method: 'POST',
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json',
          'Authorization': req.headers.get('Authorization') || '', // Pass through auth header
          'x-client-info': req.headers.get('x-client-info') || '',
          'apikey': supabaseAnonKey,
        },
        body: JSON.stringify({ text }),
      });

      if (!elevenLabsResponse.ok) {
        const errorData = await elevenLabsResponse.json();
        throw new Error(`ElevenLabs TTS failed: ${elevenLabsResponse.status} - ${JSON.stringify(errorData)}`);
      }

      const data = await elevenLabsResponse.json();
      if (data.audioUrl) {
        audioUrl = data.audioUrl;
        serviceUsed = 'elevenlabs';
        console.log('ElevenLabs TTS successful.');
      } else {
        throw new Error('ElevenLabs TTS did not return an audio URL.');
      }
    } catch (elevenLabsError) {
      console.warn(`‚ö†Ô∏è ElevenLabs TTS failed: ${elevenLabsError.message}. Attempting Play.ht as fallback.`);
      // Fallback to Play.ht
      try {
        const playHtResponse = await fetch(`${supabaseUrl}/functions/v1/playht-tts`, {
          method: 'POST',
          headers: {
            ...corsHeaders,
            'Content-Type': 'application/json',
            'Authorization': req.headers.get('Authorization') || '', // Pass through auth header
            'x-client-info': req.headers.get('x-client-info') || '',
            'apikey': supabaseAnonKey,
          },
          body: JSON.stringify({ text }),
        });

        if (!playHtResponse.ok) {
          const errorData = await playHtResponse.json();
          throw new Error(`Play.ht TTS failed: ${playHtResponse.status} - ${JSON.stringify(errorData)}`);
        }

        const data = await playHtResponse.json();
        if (data.audioUrl) {
          audioUrl = data.audioUrl;
          serviceUsed = 'playht';
          console.log('Play.ht TTS successful.');
        } else {
          throw new Error('Play.ht TTS did not return an audio URL.');
        }
      } catch (playHtError) {
        console.error(`üî• Both TTS services failed: ElevenLabs - ${elevenLabsError.message}, Play.ht - ${playHtError.message}`);
        throw new Error(`Both TTS services failed. ElevenLabs: ${elevenLabsError.message}. Play.ht: ${playHtError.message}`);
      }
    }

    if (!audioUrl) {
      throw new Error('No audio URL generated by any TTS service.');
    }

    return new Response(JSON.stringify({ audioUrl, serviceUsed }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    console.error('Error in TTS orchestrator function:', error.message);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});